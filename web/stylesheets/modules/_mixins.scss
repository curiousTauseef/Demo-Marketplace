// border box
@mixin border-box {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

// clearfix
%clearfix {
    *zoom: 1;
    &:before,
    &:after {
        content: " ";
        display: table;
    }
    &:after {
        clear: both;
    }
}

// border radius
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}

// load font family filed from font dir
$font_dir: '../fonts/';
@function _simple-font-url($name, $extension) {
    @return url($font_dir + $name + '.' + $extension);
}
@mixin register-font($name) {
    @font-face {
        font-family: $name;
        font-style: normal;
        font-weight: normal;
        src: _simple-font-url($name, 'woff');
	}
}

// horizontal linear gradients
@mixin bg-gradient-l2r($start-color, $end-color) {
    background-color: $start-color;
    background-image: -webkit-gradient(linear, left top, right top, from($start-color), to($end-color));
    background-image: -webkit-linear-gradient(left, $start-color, $end-color);
    background-image:    -moz-linear-gradient(left, $start-color, $end-color);
    background-image:     -ms-linear-gradient(left, $start-color, $end-color);
    background-image:      -o-linear-gradient(left, $start-color, $end-color);
    background-image:         linear-gradient(left, $start-color, $end-color);
    filter:            progid:DXImageTransform.Microsoft.gradient(start-colorStr='#{$start-color}', end-colorStr='#{$end-color}', gradientType='1');
}

// vertical linear gradients
@mixin bg-gradient-t2b($start-colour, $end-colour) {
    background-color: $start-colour;
    background-image: -webkit-gradient(linear, left top, left bottom, from($start-colour), to($end-colour));
    background-image: -webkit-linear-gradient(top, $start-colour, $end-colour);
    background-image:    -moz-linear-gradient(top, $start-colour, $end-colour);
    background-image:     -ms-linear-gradient(top, $start-colour, $end-colour);
    background-image:      -o-linear-gradient(top, $start-colour, $end-colour);
    background-image:         linear-gradient(top, $start-colour, $end-colour);
    filter:            progid:DXImageTransform.Microsoft.gradient(start-colourStr='#{$start-colour}', end-colourStr='#{$end-colour}');
}

// Flexbox Containers
@mixin flexbox {
	display: -webkit-box;
	display: -moz-flex;
	display: -ms-flexbox;
	display: -webkit-flex;
	display: flex;
}

// Flexbox Direction
@mixin flex-direction($flexdirection: row) {
	@if $flexdirection == row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
	} @else if $flexdirection == column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
	} @else if $flexdirection == column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
	} @else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
	}
	-webkit-flex-direction: $flexdirection;
	-moz-flex-direction: $flexdirection;
	-ms-flex-direction: $flexdirection;
	flex-direction: $flexdirection;
}

// Flexbox Wrap
@mixin flex-wrap($flexwrap: nowrap) {
	// No Webkit Box fallback.
	-webkit-flex-wrap: $flexwrap;
	-moz-flex-wrap: $flexwrap;
	@if $flexwrap == nowrap {
		-ms-flex-wrap: none;
	} @else {
		-ms-flex-wrap: $flexwrap;
	}
	flex-wrap: $flexwrap;
}

// Flexbox Grow
@mixin flex-grow($int: 0) {
	-webkit-box-flex: $int;
	-webkit-flex-grow: $int;
	-moz-flex-grow: $int;
	-ms-flex-positive: $int;
	flex-grow: $int;
}

// Flexbox Basis
@mixin flex-basis($flexbasis: auto) {
	-webkit-flex-basis: $flexbasis;
	-moz-flex-basis: $flexbasis;
	-ms-flex-preferred-size: $flexbasis;
	flex-basis: $flexbasis;
}

// Flexbox Justify Content
@mixin justify-content($justifycontent: flex-start) {
	@if $justifycontent == flex-start {
		-webkit-box-pack: start;
		-ms-flex-pack: start;
	} @else if $justifycontent == flex-end {
		-webkit-box-pack: end;
		-ms-flex-pack: end;
	} @else if $justifycontent == space-between {
		-webkit-box-pack: justify;
		-ms-flex-pack: justify;
	} @else if $justifycontent == space-around {
		-ms-flex-pack: distribute;
	} @else {
		-webkit-box-pack: $justifycontent;
		-ms-flex-pack: $justifycontent;
	}
	-webkit-justify-content: $justifycontent;
	-moz-justify-content: $justifycontent;
	justify-content: $justifycontent;
}

// Flexbox Align Items
@mixin align-items($alginitems: stretch) {
	@if $alginitems == flex-start {
		-webkit-box-align: start;
		-ms-flex-align: start;
	} @else if $alginitems == flex-end {
		-webkit-box-align: end;
		-ms-flex-align: end;
	} @else {
		-webkit-box-align: $alginitems;
		-ms-flex-align: $alginitems;
	}
	-webkit-align-items: $alginitems;
	-moz-align-items: $alginitems;
	align-items: $alginitems;
}

// Flexbox Align Self
@mixin align-self($alignself: auto) {
	// No Webkit Box Fallback.
	-webkit-align-self: $alignself;
	-moz-align-self: $alignself;
	@if $alignself == flex-start {
		-ms-flex-item-align: start;
	} @else if $alignself == flex-end {
		-ms-flex-item-align: end;
	} @else {
		-ms-flex-item-align: $alignself;
	}
	align-self: $alignself;
}

// Flexbox Align Content
@mixin align-content($aligncontent: stretch) {
	// No Webkit Box Fallback.
	-webkit-align-content: $aligncontent;
	-moz-align-content: $aligncontent;
	@if $aligncontent == flex-start {
		-ms-flex-line-pack: start;
	} @else if $aligncontent == flex-end {
		-ms-flex-line-pack: end;
	} @else {
		-ms-flex-line-pack: $aligncontent;
	}
	align-content: $aligncontent;
}